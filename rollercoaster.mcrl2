%%
% Sorts
%%
sort
    Segment = struct station | braking | repair | lift | main;
map
    % What the next segment in the track will be
    next_segment: Segment -> Segment;
    % Whether or not segment 1 should block a cart from continuing if segment 2 is occupied
    is_blocked: Segment # Segment -> Bool;
    cart1_start, cart2_start: Segment;
var
    s1, s2: Segment;
eqn
    cart1_start = station;
    cart2_start = repair;
    (s1 == station) -> next_segment(s1) = lift;
    (s1 == lift) -> next_segment(s1) = main;
    (s1 == main) -> next_segment(s1) = braking;
    (s1 == braking) -> next_segment(s1) = station;
    (s1 == repair) -> next_segment(s1) = station;

    (s1 == station && (s2 != braking && s2 != repair)) -> is_blocked(s1, s2) = true;
    (s1 == station && !(s2 != braking && s2 != repair)) -> is_blocked(s1, s2) = false;
    (s1 == lift && (s2 != station && s2 != repair)) -> is_blocked(s1, s2) = true;
    (s1 == lift && !(s2 != station && s2 != repair)) -> is_blocked(s1, s2) = false;
    (s1 == repair && s2 != braking) -> is_blocked(s1, s2) = true;
    (s1 == repair && s2 == braking) -> is_blocked(s1, s2) = false;
    (s1 == braking && s2 == station) -> is_blocked(s1, s2) = true;
    (s1 == braking && s2 != station) -> is_blocked(s1, s2) = false;
    (s1 == main) -> is_blocked(s1, s2) = false; % main track area can't block

sort Cart_Id = struct cart1_id | cart2_id;
sort Button_Id = struct left_button | right_button;
sort SwitchPos = struct up | down;

%%
% Actions
%%

act
    cart_forward, cart_backward, allow_forward, allow_backward, forward, backward,
    switch_allow_forward, switch_allow_backward, gate_allow_forward,
    gate_allow_backward, button_right_allow_forward, button_left_allow_forward, button_allow_forward: Cart_Id # Segment # Segment;
    gates_close, gates_open, allow_gates_open, switch_allow_gates_open, allow_gates_close, station_close_gates, station_open_gates;
    switch_up, switch_down, allow_switch_up, allow_switch_down, station_switch_up, station_switch_down;
    cart_open_braces, allow_open_braces, open_braces, button_right_braces_open, button_left_braces_open, button_braces_open,
    cart_close_braces, set_braces_closed, button_right_braces_closed, button_left_braces_closed, button_braces_closed: Cart_Id;
    push_button: Button_Id;
    push_left_button, push_right_button, station_push_left_button, station_push_right_button, gate_allow_push_left_button, gate_allow_push_right_button;

%%
% ProcessesThe switch will not allow the gates to be opened if the switch is up
%%

% Cart Process
proc Cart(id:Cart_Id, pos:Segment, open:Bool) =
    (!open && pos == station) ->
        (
            cart_forward(id, station, lift) . Cart(id, lift, open)
            +
            cart_backward(id, station, repair) . Cart(id, repair, open)
        )
    +
    (!open && pos == lift) -> cart_forward(id, lift, main) . Cart(id, main, open)
    +
    (!open && pos == main) -> cart_forward(id, main, braking) . Cart(id, braking, open)
    +
    (!open && pos == braking) -> cart_forward(id, braking, station) . Cart(id, station, open)
    +
    (!open && pos == repair) -> cart_forward(id, repair, station) . Cart(id, station, open)
    +
    (!open) -> cart_open_braces(id) . Cart(id, pos, true)
    +
    (open) -> cart_close_braces(id) . Cart(id, pos, false);

% Track Process
proc Track(c1:Segment, c2:Segment) = 
    sum from, to: Segment . 
    (
        (next_segment(from) == to && from == c1 && !is_blocked(from, c2)) -> allow_forward(cart1_id, from, to) . Track(to, c2)
        +
        (next_segment(from) == to && from == c2 && !is_blocked(from, c1)) -> allow_forward(cart2_id, from, to) . Track(c1, to)
    )
    +
    (c1 == station && c2 != repair) -> allow_backward(cart1_id, station, repair) . Track(repair, c2)
    +
    (c2 == station && c1 != repair) -> allow_backward(cart2_id, station, repair) . Track(c1, repair)
    +
    ((c1 == braking && (c2 == repair || c2 == station)) || (c2 == braking && (c1 == repair || c1 == station))) -> (allow_switch_up + allow_switch_down) . Track(c1, c2)
    +
    (c1 == station || c2 == station) -> (allow_gates_open + allow_gates_close) . Track(c1, c2)
    +
    (c1 == station) -> allow_open_braces(cart1_id) . Track(c1, c2)
    +
    (c2 == station) -> allow_open_braces(cart2_id) . Track(c1, c2);

% Gate Process
proc Gate(open:Bool) =
    (open) ->
        (
            gates_close . Gate(false)
        )
    <>
        (
            gates_open . Gate(true)
            +
            sum cart_id: Cart_Id . sum to: Segment . (
                gate_allow_forward(cart_id, station, to) + gate_allow_backward(cart_id, station, to)
                ) . Gate(open)
            +
            gate_allow_push_left_button
            +
            gate_allow_push_right_button
        )
    +
    sum cart_id: Cart_Id . sum from, to: Segment . (from != station) ->
        (gate_allow_forward(cart_id, from, to) + gate_allow_backward(cart_id, from, to)) . Gate(open);

% Switch Process
proc Switch(pos:SwitchPos) =
    sum cart_id: Cart_Id . (pos == up) ->
        (
            switch_down . Switch(down)
            +
            switch_allow_forward(cart_id, repair, station) . Switch(pos)
            +
            switch_allow_backward(cart_id, station, repair) . Switch(pos)
        )
    <>
        (
            switch_up . Switch(up)
            +
            switch_allow_forward(cart_id, braking, station) . Switch(pos)
            +
                sum from, to: Segment . (from != braking && from != repair) ->
                    switch_allow_forward(cart_id, from, to) . Switch(pos)
            +
                sum from, to: Segment . (from != station) ->
                    switch_allow_backward(cart_id, from, to) . Switch(pos)
        )
    +
    (pos == down) -> switch_allow_gates_open . Switch(pos);

% Buttons
proc Button(id:Button_Id, open:Bool) =
    (!open) -> sum cart_id:Cart_Id . button_braces_open(cart_id) . Button(id, true)
    +
    (open) -> push_button(id) . Button(id, false)
    +
    (!open) -> sum cart_id:Cart_Id . (
        sum to:Segment . button_allow_forward(cart_id, station, to) . Button(id, open)
        +
        button_braces_closed(cart_id) . Button(id, open)
    )
    +
    sum from, to: Segment . sum cart_id:Cart_Id . (from != station) -> button_allow_forward(cart_id, from, to) . Button(id, open);

proc Left_Button(open: Bool) = rename({
    push_button -> push_left_button,
    button_allow_forward -> button_left_allow_forward,
    button_braces_closed -> button_left_braces_closed,
    button_braces_open -> button_left_braces_open
}, Button(left_button, open));

proc Right_Button(open: Bool) = rename({
    push_button -> push_right_button,
    button_allow_forward -> button_right_allow_forward,
    button_braces_closed -> button_right_braces_closed,
    button_braces_open -> button_right_braces_open
}, Button(right_button, open));

%%
% Init
%%
init allow(
    { 
        forward, backward, station_switch_up, station_switch_down, station_close_gates, station_open_gates, open_braces, station_push_right_button, station_push_left_button, set_braces_closed
    },
    comm (
        {
            cart_forward | allow_forward | switch_allow_forward | gate_allow_forward | button_right_allow_forward | button_left_allow_forward -> forward,
            cart_backward | allow_backward | switch_allow_backward | gate_allow_backward -> backward,
            allow_gates_close | gates_close -> station_close_gates,
            allow_gates_open | switch_allow_gates_open | gates_open -> station_open_gates,
            allow_switch_up | switch_up -> station_switch_up,
            allow_switch_down | switch_down -> station_switch_down,
            allow_open_braces | cart_open_braces | button_braces_open -> open_braces,
            cart_close_braces | button_right_braces_closed | button_left_braces_closed -> set_braces_closed,
            push_left_button | gate_allow_push_left_button -> station_push_left_button,
            push_right_button | gate_allow_push_right_button -> station_push_right_button
        },
        Cart(cart1_id, cart1_start, false) || Cart(cart2_id, cart2_start, false) || Track(cart1_start, cart2_start) ||
        Switch(down) || Gate(false) || Left_Button(false) || Right_Button(false)
    ));
